#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineConfig


def type = "java"
def product = "am"
def component = "lib-test"

def secretId = "am-lib-test-${params.ENVIRONMENT}"
def secrets = [
  (secretId): [
    secret('am-lib-test-POSTGRES-HOST', 'DATABASE_HOST'),
    secret('am-lib-test-POSTGRES-PORT', 'DATABASE_PORT'),
    secret('am-lib-test-POSTGRES-DATABASE', 'DATABASE_NAME'),
    secret('am-lib-test-POSTGRES-USER', 'DATABASE_USER'),
    secret('am-lib-test-POSTGRES-PASS', 'DATABASE_PASS')
  ]
]

static Map<String, Object> secret(String secretName, String envVariable) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    envVariable: envVariable
  ]
}


def subscription = "nonprod"
def config = new AppPipelineConfig()
config.vaultSecrets = secrets

withPipeline(type, product, component) {
  setVaultName('am')
  enableDockerBuild()
  installCharts()
  enableDbMigration()

  onMaster {
    enableSlackNotifications('#am-master-builds')

    before('aat:promotion') {
      withCredentials([usernamePassword(credentialsId: 'jenkins-github-hmcts-api-token', usernameVariable: 'USERNAME', passwordVariable: 'BEARER_TOKEN')]) {
        sh '''
          set -e

          function publish {
            git config user.email "jenkins@local"
            git config user.name "Jenkins"
            git remote set-url origin $(git config remote.origin.url | sed "s/github.com/${BEARER_TOKEN}@github.com/g")

            git checkout --orphan gh-pages
            git add javadoc/
            git commit -m "docs: add latest version of Javadoc" javadoc/
            git push --force origin gh-pages
          }

          cp -r am-lib/build/docs/javadoc . && publish && rm -rf javadoc/
        '''
      }
    }

    before('Functional Test - AKS preview') {
      sh "echo 'insert functional test data'"
      withSubscription(subscription) {
        withTeamSecrets(config, params.ENVIRONMENT) {
          sh "./gradlew loadPerformanceTestData -PDATABASE_USER=${DATABASE_USER} " +
            "-PDATABASE_NAME=${DATABASE_NAME} -PDATABASE_PASSWORD=${DATABASE_PASS} -PDATABASE_HOST=${DATABASE_HOST} -PDATABASE_PORT=${DATABASE_PORT} -PENVIRONMENT=${params.ENVIRONMENT}"
        }
      }
      print "done functional test data insertion"
    }

    after('Functional Test - AKS preview') {
      sh "echo 'delete functional test data'"
      withSubscription(subscription) {
        withTeamSecrets(config, params.ENVIRONMENT) {
          sh "./gradlew deletePerformanceTestData -PDATABASE_USER=${DATABASE_USER} " +
            "-PDATABASE_NAME=${DATABASE_NAME} -PDATABASE_PASSWORD=${DATABASE_PASS} -PDATABASE_HOST=${DATABASE_HOST} -PDATABASE_PORT=${DATABASE_PORT} -PENVIRONMENT=${params.ENVIRONMENT}"
        }
      }
      print "done functional test deletion"
    }

    after('smoketest:aat') {
      echo "Disabling prod build"
      sh "rm -rf infrastructure/"
    }
  }

  onPR {
    // channel won't be used instead the user channel configured here is used:
    // https://github.com/hmcts/github-slack-user-mappings
    enableSlackNotifications('#am-pr-builds')
  }
}
