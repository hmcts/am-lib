#!groovy


@Library("Infrastructure")


def type = "java"
def product = "am"
def component = "lib-test"

def secretId = "am-lib-test-${params.ENVIRONMENT}"
def secrets = [

  "am-lib-test-aat": [
    secret('am-lib-test-POSTGRES-HOST', 'DATABASE_HOST'),
    secret('am-lib-test-POSTGRES-PORT', 'DATABASE_PORT'),
    secret('am-lib-test-POSTGRES-DATABASE', 'DATABASE_NAME'),
    secret('am-lib-test-POSTGRES-USER', 'DATABASE_USER'),
    secret('am-lib-test-POSTGRES-PASS', 'DATABASE_PASS')
  ],
  "s2s-demo": [
    secret('microservicekey-am-accessmgmt-api', 'S2S_SECRET')
  ]
]

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def vaultOverrides = [
  'preview' : 'aat',
  'spreview': 'saat'
]


withPipeline(type, product, component) {

  overrideVaultEnvironments(vaultOverrides)
  loadVaultSecrets(secrets)
  //setVaultName('am-lib-test')
  enableDockerBuild()
  installCharts()
  enableDbMigration()

  env.S2S_URL_FOR_TESTS = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
  env.S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"

  before('functionalTest:preview') {
    env.URL_TO_TEST = "http://am-lib-test-aat.service.core-compute-aat.internal"
  }

  before('functionalTest:aat') {
    env.URL_TO_TEST = env.TEST_URL
  }

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
  }

  after('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
  }

  onMaster {
    env.URL_TO_TEST =  env.TEST_URL
    enableSlackNotifications('#am-master-builds')

    before('aat:promotion') {
      withCredentials([usernamePassword(credentialsId: 'jenkins-github-hmcts-api-token', usernameVariable: 'USERNAME', passwordVariable: 'BEARER_TOKEN')]) {
        sh '''
          set -e

          function publish {
            git config user.email "jenkins@local"
            git config user.name "Jenkins"
            git remote set-url origin $(git config remote.origin.url | sed "s/github.com/${BEARER_TOKEN}@github.com/g")

            git checkout --orphan gh-pages
            git add javadoc/
            git commit -m "docs: add latest version of Javadoc" javadoc/
            git push --force origin gh-pages
          }

          cp -r am-lib/build/docs/javadoc . && publish && rm -rf javadoc/
        '''
      }
    }

    after('smoketest:aat') {
      echo "Disabling prod build"
      sh "rm -rf infrastructure/"
    }
  }

  onPR {
    // channel won't be used instead the user channel configured here is used:
    // https://github.com/hmcts/github-slack-user-mappings
    enableSlackNotifications('#am-pr-builds')
  }
}
