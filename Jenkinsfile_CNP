#!groovy

properties([
  parameters([
    string(name: 'ENVIRONMENT', defaultValue: 'aat', description: 'Environment to test')
  ])
])

@Library("Infrastructure")

def type = "java"
def product = "am"
def component = "accessmgmt-api"

def appVault = "am-${params.ENVIRONMENT}"

def secrets = [
  (appVault): [
    secret('accessmgmt-api-POSTGRES-HOST', 'DATABASE_HOST'),
    secret('accessmgmt-api-POSTGRES-PORT', 'DATABASE_PORT'),
    secret('accessmgmt-api-POSTGRES-DATABASE', 'DATABASE_NAME'),
    secret('accessmgmt-api-POSTGRES-USER', 'DATABASE_USER'),
    secret('accessmgmt-api-POSTGRES-PASS', 'DATABASE_PASS'),
    secret('s2s-secret', 'S2S_SECRET')
  ]
]

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def vaultOverrides = [
  'preview' : 'aat',
  'spreview': 'saat'
]

withPipeline(type, product, component) {

  overrideVaultEnvironments(vaultOverrides)
  loadVaultSecrets(secrets)
  enableDockerBuild()
  installCharts()
  enableDbMigration('am')
  enableAksStagingDeployment()

  env.S2S_URL_FOR_TESTS = "http://rpe-service-auth-provider-${params.ENVIRONMENT}.service.core-compute-${params.ENVIRONMENT}.internal"
  env.S2S_URL = "http://rpe-service-auth-provider-${params.ENVIRONMENT}.service.core-compute-${params.ENVIRONMENT}.internal"

  before('functionalTest:sandbox') {
    env.URL_TO_TEST = env.TEST_URL
  }

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
  }

  after('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
  }

  onMaster {

    env.environment_name = "aat"
    env.URL_TO_TEST =  env.TEST_URL
    enableSlackNotifications('#am-master-builds')

    before('aat:promotion') {
      withCredentials([usernamePassword(credentialsId: 'jenkins-github-hmcts-api-token', usernameVariable: 'USERNAME', passwordVariable: 'BEARER_TOKEN')]) {
        sh '''
          set -e

          function publish {
            git config user.email "jenkins@local"
            git config user.name "Jenkins"
            git remote set-url origin $(git config remote.origin.url | sed "s/github.com/${BEARER_TOKEN}@github.com/g")

            git checkout --orphan gh-pages
            git add javadoc/
            git commit -m "docs: add latest version of Javadoc" javadoc/
            git push --force origin gh-pages
          }

          cp -r am-lib/build/docs/javadoc . && publish && rm -rf javadoc/
        '''
      }
    }

    after('smoketest:aat') {
      echo "Disabling prod build"
      sh "rm -rf infrastructure/"
    }
  }

  onPR {
    // channel won't be used instead the user channel configured here is used:
    // https://github.com/hmcts/github-slack-user-mappings
    enableSlackNotifications('#am-pr-builds')
  }
}
