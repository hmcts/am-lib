#!groovy

properties([
  // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
  pipelineTriggers([cron('H 05 * * *')]),
  parameters([
    string(name: 'ENVIRONMENT', defaultValue: 'aat', description: 'Environment to test'),
    string(name: 'URL_TO_TEST', defaultValue: 'http://am-lib-test-aat.service.core-compute-aat.internal', description: 'The URL you want to run these tests against'),
    string(name: 'SecurityRules',
      defaultValue: 'https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
      description: 'The URL you want to run these tests against'),
  ])
])

@Library("Infrastructure")

def type = "java"
def product = "am"
def component = "lib-test"

def secretId = "am-lib-test-${params.ENVIRONMENT}"
def secrets = [
  "s2s-${params.ENVIRONMENT}": [
    secret('microservicekey-am-accessmgmt-api', 'S2S_SECRET')
  ],
  (secretId): [
    secret('am-lib-test-POSTGRES-HOST', 'DATABASE_HOST'),
    secret('am-lib-test-POSTGRES-PORT', 'DATABASE_PORT'),
    secret('am-lib-test-POSTGRES-DATABASE', 'DATABASE_NAME'),
    secret('am-lib-test-POSTGRES-USER', 'DATABASE_USER'),
    secret('am-lib-test-POSTGRES-PASS', 'DATABASE_PASS'),
    secret('microservicekey-am-accessmgmt-api', 'S2S_SECRET')
  ]
]


static Map<String, Object> secret(String secretName, String envVariable) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    envVariable: envVariable
  ]
}

def vaultOverrides = [
  'preview' : 'aat',
  'spreview': 'saat'
]
import uk.gov.hmcts.contino.AppPipelineConfig

def subscription = "nonprod"
def config = new AppPipelineConfig()
config.vaultSecrets = secrets



def loadOrDeletePerformanceDbData(String parameterLoadOrDelete) {
      withDocker('jbergknoff/postgresql-client', "--entrypoint='' -e PGPASSWORD=${DATABASE_PASS} -v ${WORKSPACE}/nightlyperformancedata/:/nightlyperformancedata") {
        sh "chmod +x /nightlyperformancedata/load-or-delete-performance-testdata.sh"
        sh "/nightlyperformancedata/load-or-delete-performance-testdata.sh \
                        ${WORKSPACE} \
                        ${parameterLoadOrDelete} \
                        ${DATABASE_USER} \
                        ${DATABASE_NAME} \
                        ${DATABASE_HOST} \
                        ${DATABASE_PASS} \
                        ${DATABASE_PORT} \
                        ${params.ENVIRONMENT}"
      }
}

withNightlyPipeline(type, product, component) {
  //setVaultName('am-lib-test')

  env.TEST_URL = params.URL_TO_TEST
  env.S2S_URL_FOR_TESTS = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
  env.Rules = params.SecurityRules

  overrideVaultEnvironments(vaultOverrides)
  loadVaultSecrets(secrets)

  enableMutationTest()
  enablePerformanceTest()
  enableSlackNotifications('#am-master-builds')


  after('checkout') {
    sh '''
      set -e
  
      echo "7be85238cbbb957ab25de52b60279d40ba40d3faa72eeb2cb9fa77d6d92381e5 git-lfs-v2.7.1.tar.gz" > git-lfs-v2.7.1.checksum.txt
      curl --silent --location https://github.com/git-lfs/git-lfs/releases/download/v2.7.1/git-lfs-linux-amd64-v2.7.1.tar.gz > git-lfs-v2.7.1.tar.gz
      sha256sum --check --status git-lfs-v2.7.1.checksum.txt
      
      tar xz -f git-lfs-v2.7.1.tar.gz -C bin/ git-lfs
    
      export PATH=$PATH:./bin
      git lfs install --local && git lfs pull
    '''
  }

  before('PerformanceTest') {
    sh "echo 'Benchmark is about to start'"
    sh "./gradlew benchmark --info --rerun-tasks && ./gradlew jmhReport --info --rerun-tasks"
    print "calling loadPerformanceTestData gatling"
    withSubscription(subscription) {
      withTeamSecrets(config, params.ENVIRONMENT) {
        loadOrDeletePerformanceDbData('load')
      }
    }
    print "done loadPerformanceTestData gatling"
  }

  after('PerformanceTest') {
    print "calling deletePerformanceTestData gatling"
    withSubscription(subscription) {
      withTeamSecrets(config, params.ENVIRONMENT) {
        loadOrDeletePerformanceDbData('delete')
      }
    }
    print "done deletePerformanceTestData gatling"
    archiveArtifacts allowEmptyArchive: true, artifacts: 'am-lib/build/reports/jmh/result.json'
    publishHTML([
      reportDir: 'am-lib/build/reports/jmh',
      reportFiles: 'index.html',
      reportName: 'JMH Benchmark',
      allowMissing: true,
      alwaysLinkToLastBuild: true,
      keepAll: true
    ])
  }
}
