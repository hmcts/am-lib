plugins {
    id 'java-library'
    id 'maven-publish'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
    id 'org.sonarqube' version '2.8'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id "io.freefair.aspectj.post-compile-weaving" version "3.2.1"
    id "io.freefair.lombok" version "4.1.2"
    id "io.morethan.jmhreport" version "0.9.0"
}

group 'uk.gov.hmcts.reform'
version "${version}"

sourceSets {
  benchmark {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/benchmark/java')
    }
    resources.srcDir file('src/benchmark/resources')
  }
}

test {
    useJUnitPlatform()
}

lombok {
  version = '1.18.6'
}

checkstyle {
    toolVersion = '8.19'
    maxWarnings = 0
    configDir = new File("config/checkstyle")
}

pmd {
    toolVersion = "6.13.0"
    sourceSets = [sourceSets.main, sourceSets.test]
    reportsDir = file("$buildDir/reports/pmd/$project.name")
    ruleSetFiles = files("$projectDir/config/pmd/ruleset.xml")
    ruleSets = []
}

sonarqube {
    properties {
        property "sonar.projectName", "Reform :: am-lib"
        property "sonar.projectKey", "uk.gov.hmcts.reform:am-lib"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
        property "sonar.jacoco.itReportPath", "${project.buildDir}/jacoco/integration.exec"
        property "sonar.coverage.exclusions", "**/models/**,**/repositories/mappers/**,**/AspectsSuite.java"
    }
}

project.tasks['sonarqube'].dependsOn test

sourceCompatibility = 1.8

compileJava {
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.compilerArgs << '-parameters'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
      url  "https://dl.bintray.com/hmcts/hmcts-maven"
    }
}

configurations.all {
  resolutionStrategy {
    force 'com.fasterxml.jackson.core:jackson-databind:2.10.0'
    force 'commons-beanutils:commons-beanutils:1.9.4'
  }
}

dependencies {
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.0.pr3'
    compile group: 'org.jdbi', name: 'jdbi3-core', version: '3.10.1'
    compile group: 'org.jdbi', name: 'jdbi3-sqlobject', version: '3.10.1'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.8'
    compile group: 'org.hibernate.validator', name: 'hibernate-validator', version: '6.0.17.Final'
    compile group: 'org.aspectj', name: 'aspectjrt', version: '1.9.4'
    compile group: 'io.swagger', name: 'swagger-annotations', version: '1.5.24'
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    compile group: 'org.springframework', name: 'spring-jdbc', version: '5.2.0.RELEASE'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.5.2'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.1.0'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.13.2'
    testCompile group: 'org.flywaydb', name: 'flyway-core', version: '6.0.6'
    testCompile group: 'org.testcontainers', name: 'postgresql', version: '1.12.2'
    testCompile group: 'com.google.guava', name: 'guava', version: '28.1-jre'
    testCompile group: 'uk.gov.hmcts.reform', name: 'java-logging', version: '5.0.1'
    testCompile group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: '5.0.1'

    benchmarkAnnotationProcessor group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: '1.21'

    benchmarkImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.5.1'
    benchmarkCompile group: 'org.openjdk.jmh', name: 'jmh-core', version: '1.23'
    benchmarkCompile sourceSets.main.runtimeClasspath
    benchmarkCompile group: 'uk.gov.hmcts.reform', name: 'java-logging', version: '5.0.1'
    benchmarkCompile group: 'com.google.guava', name: 'guava', version: '28.1-jre'
}

task codeCoverageReport(type: JacocoReport, dependsOn: test) {

    // Gather execution data from all subprojects
    // (change this if you e.g. want to calculate unit test/integration test coverage separately)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    reports {
        csv.enabled = false
        html.enabled = true
        html.destination = file("${buildDir}/reports/jacoco/html")
        xml.enabled = true
        xml.destination = file("${buildDir}/reports/jacoco/jacocoTestReport.xml")
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

shadowJar {
    from('src/main/java') {
        include '**/*.sql'
    }
    def packages = [
        'org.aspectj',
        'org.hibernate.validator',
        'org.hibernate.validator',
        'javax.validation',
        'org.jboss.logging',
        'com.fasterxml.classmate'
    ]
    packages.each({pkg ->
      relocate pkg, 'shaded.' + pkg
    })
    archiveClassifier = 'all'
}

artifacts {
    archives shadowJar
    archives javadocJar
}

publishing {
    publications {
        Main(MavenPublication) {
            from components.java
            artifact shadowJar
            artifact javadocJar
            groupId project.group
            artifactId 'am-lib'
            version project.version
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['Main']
    publish = true
    pkg {
        repo = 'hmcts-maven'
        name = 'am-lib'
        userOrg = 'hmcts'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/hmcts/am-lib'
        version {
            name = project.version
        }
    }
}

task benchmark(type: Test, description: 'Runs benchmarks', group: 'Verification') {
  testClassesDirs = sourceSets.benchmark.output.classesDirs
  classpath = sourceSets.benchmark.runtimeClasspath
}

benchmark {
  useJUnitPlatform()
}

jmhReport {
  jmhResultPath = project.file('build/reports/jmh/result.json')
  jmhReportOutput = project.file('build/reports/jmh')
}
