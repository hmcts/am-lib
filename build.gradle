import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
  repositories {
    mavenCentral()
  }
  configurations.maybeCreate('pitest')
  dependencies {
    classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.4.0'
    pitest 'org.pitest:pitest-junit5-plugin:0.9'
  }
}


plugins {
    id 'application'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'org.springframework.boot' version '2.1.7.RELEASE'
    id 'org.owasp.dependencycheck' version '5.2.1'
    id 'com.github.ben-manes.versions' version '0.22.0'
    id "org.flywaydb.flyway" version "5.2.4"
}

subprojects {
    apply plugin: 'org.owasp.dependencycheck'
    apply plugin: 'com.github.ben-manes.versions'
}

allprojects {
  // https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
  dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'
    analyzers {
      // Disable scanning of .NET related binaries
      assemblyEnabled = false
    }
  }
}

def DATABASE_USER = project.properties['DATABASE_USER'] ?: "amuser"
def DATABASE_NAME = project.properties['DATABASE_NAME'] ?: "am"
def ENVIRONMENT_NAME = project.properties['ENVIRONMENT'] ?: "local"
def DATABASE_HOST = project.properties['DATABASE_HOST'] ?: "localhost"
def DATABASE_PASSWORD = project.properties['DATABASE_PASSWORD'] ?: ""
def DATABASE_PORT = project.properties['DATABASE_PORT'] ?: "5433"

project(":am-lib") {
  apply plugin: 'info.solidsoft.pitest'

  pitest {
    pitestVersion = '1.4.7'
    testPlugin = 'junit5'
    targetClasses = [
      'uk.gov.hmcts.reform.amlib.*'
    ]
    targetTests = [
      'integration.uk.gov.hmcts.reform.amlib.*Test'
    ]
    excludedClasses = [
      'uk.gov.hmcts.reform.amlib.models.*',
      'uk.gov.hmcts.reform.amlib.helpers.TestConstants',
      'uk.gov.hmcts.reform.amlib.helpers.TestDataFactory'
    ]
    excludedTestClasses = [
      'integration.uk.gov.hmcts.reform.amlib.base.IntegrationBaseTest'
    ]
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 80
  }
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    test {
        java.srcDir 'src/test/java'
    }
    functional {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/test/resources')
    }

    test {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/test/java')
        }
    }

    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
    testClassesDirs = sourceSets.functional.output.classesDirs
    classpath = sourceSets.functional.runtimeClasspath
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

configurations {
    functionalCompile.extendsFrom testCompile
    functionalRuntime.extendsFrom testRuntime
}

task smoke(type: Test) {
    description = "Runs Smoke Tests"
    testClassesDirs = sourceSets.functional.output.classesDirs
    classpath = sourceSets.functional.runtimeClasspath

    useJUnitPlatform {
        includeTags = ['SmokeTest']
    }
}

checkstyle {
    maxWarnings = 0
    toolVersion = '8.19'
    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
    configDir = new File(rootDir, 'config/checkstyle')
}

pmd {
    toolVersion = "6.13.0"
    sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functional, sourceSets.integrationTest]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files("config/pmd/ruleset.xml")
    ruleSets = []
}

jacocoTestReport {
    executionData(test, integration)
    reports {
        xml.enabled = true
        csv.enabled = false
        xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

repositories {
    jcenter()
    maven {
      url  "https://dl.bintray.com/hmcts/hmcts-maven"
    }
}

// it is important to specify logback classic and core packages explicitly as libraries like spring boot
// enforces it's own (older) version which is not recommended.
def versions = [
        reformLogging   : '5.0.1',
        reformHealthStarter: '0.0.4',
        springBoot      : springBoot.class.package.implementationVersion,
        springfoxSwagger: '2.9.2',
        flyway          : '5.2.4',
        guava           : '28.0-jre'
]

dependencies {
    compile project(':am-lib')

    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.8'
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.6'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.9.3'

    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: versions.springBoot



    compile (group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger) {
      exclude group: "com.google.guava", module: "guava"
    }

    compile (group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger) {
      exclude group: "com.google.guava", module: "guava"
    }

    compile group: 'com.google.guava', name: 'guava', version: versions.guava

    compile group: 'uk.gov.hmcts.reform', name: 'java-logging', version: versions.reformLogging
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: versions.reformLogging
    compile group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version: versions.reformHealthStarter

    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.6'
    compile group: 'org.flywaydb', name: 'flyway-core', version: versions.flyway

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.5.1'
    
    testCompile group: 'io.rest-assured', name: 'rest-assured', version: '4.0.0'
    testCompile group: 'io.rest-assured', name: 'json-path', version: '4.0.0'

    testCompile (group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot) {
        exclude group: 'junit', module: 'junit'
    }

    integrationTestCompile sourceSets.main.runtimeClasspath
    integrationTestCompile sourceSets.test.runtimeClasspath

    functionalCompile sourceSets.main.runtimeClasspath
    functionalCompile sourceSets.test.runtimeClasspath
}

mainClassName = 'uk.gov.hmcts.reform.amapi.Application'

bootJar {
    archiveFileName = 'am-lib-testing-service.jar'

    manifest {
        attributes('Implementation-Version': project.version.toString())
    }
}

task sonarqube(type: Exec) {
    workingDir './am-lib'
    commandLine './gradlew', 'sonarqube', '--rerun-tasks'
}

//local flyway settings
flyway {
    url = 'jdbc:postgresql://localhost:5433/am'
    user = 'amuser'
    password = 'ampass'
    locations = ["filesystem:am-lib/src/main/resources/db/migration"]
}

task migratePostgresDatabase(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    baselineOnMigrate = true
    outOfOrder = true
    if (project.hasProperty("dburl")) {
        url = "jdbc:postgresql://${dburl}"
    }
}

task loadPerformanceTestData(type: Exec) {
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    commandLine 'cmd', '/c', file("${project.projectDir}/nightlyperformancedata/load-or-delete-performance-testdata-win.bat"),
      file("${project.projectDir}/nightlyperformancedata/sql"), "load", "${DATABASE_USER}", "${DATABASE_NAME}", "${DATABASE_HOST}", "${DATABASE_PASSWORD}", "${DATABASE_PORT}", "${ENVIRONMENT_NAME}"
  } else {
    commandLine 'sh', file("${project.projectDir}/nightlyperformancedata/load-or-delete-performance-testdata.sh"),
      file("${project.projectDir}/nightlyperformancedata/sql"), "load", "${DATABASE_USER}", "${DATABASE_NAME}","${DATABASE_HOST}", "${DATABASE_PASSWORD}", "${DATABASE_PORT}", "${ENVIRONMENT_NAME}"
  }
}

task deletePerformanceTestData(type: Exec) {
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    commandLine 'cmd', '/c', file("${project.projectDir}/nightlyperformancedata/load-or-delete-performance-testdata-win.bat"),
      file("${project.projectDir}/nightlyperformancedata/sql"), "delete", "${DATABASE_USER}", "${DATABASE_NAME}", "${DATABASE_HOST}", "${DATABASE_PASSWORD}", "${DATABASE_PORT}", "${ENVIRONMENT_NAME}"
  } else {
    commandLine 'sh', file("${project.projectDir}/nightlyperformancedata/load-or-delete-performance-testdata.sh"),
      file("${project.projectDir}/nightlyperformancedata/sql"), "delete" ,"${DATABASE_USER}", "${DATABASE_NAME}", "${DATABASE_HOST}", "${DATABASE_PASSWORD}", "${DATABASE_PORT}", "${ENVIRONMENT_NAME}"
  }
}

test {
    useJUnitPlatform()
}

integration {
    useJUnitPlatform()
}

functional {
    useJUnitPlatform()
}
